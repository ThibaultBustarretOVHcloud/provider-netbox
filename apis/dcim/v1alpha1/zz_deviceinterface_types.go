// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceInterfaceInitParameters struct {

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) If this device is a member of a LAG group, you can reference the LAG interface here.
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceID *float64 `json:"lagDeviceInterfaceId,omitempty" tf:"lag_device_interface_id,omitempty"`

	// (String)
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// (Boolean)
	Mgmtonly *bool `json:"mgmtonly,omitempty" tf:"mgmtonly,omitempty"`

	// all.
	// Valid values are `access`, `tagged` and `tagged-all`.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Number)
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	// The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceID *float64 `json:"parentDeviceInterfaceId,omitempty" tf:"parent_device_interface_id,omitempty"`

	// (Number)
	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`

	// (Set of Number)
	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`
}

type DeviceInterfaceObservation struct {

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number)
	DeviceID *float64 `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Number) If this device is a member of a LAG group, you can reference the LAG interface here.
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	LagDeviceInterfaceID *float64 `json:"lagDeviceInterfaceId,omitempty" tf:"lag_device_interface_id,omitempty"`

	// (String)
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// (Boolean)
	Mgmtonly *bool `json:"mgmtonly,omitempty" tf:"mgmtonly,omitempty"`

	// all.
	// Valid values are `access`, `tagged` and `tagged-all`.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Number)
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String)
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	// The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	ParentDeviceInterfaceID *float64 `json:"parentDeviceInterfaceId,omitempty" tf:"parent_device_interface_id,omitempty"`

	// (Number)
	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`

	// (Set of Number)
	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`
}

type DeviceInterfaceParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number)
	// +crossplane:generate:reference:type=Device
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DeviceID *float64 `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// Reference to a Device to populate deviceId.
	// +kubebuilder:validation:Optional
	DeviceIDRef *v1.Reference `json:"deviceIdRef,omitempty" tf:"-"`

	// Selector for a Device to populate deviceId.
	// +kubebuilder:validation:Optional
	DeviceIDSelector *v1.Selector `json:"deviceIdSelector,omitempty" tf:"-"`

	// (Boolean) Defaults to true.
	// Defaults to `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (Number) If this device is a member of a LAG group, you can reference the LAG interface here.
	// If this device is a member of a LAG group, you can reference the LAG interface here.
	// +kubebuilder:validation:Optional
	LagDeviceInterfaceID *float64 `json:"lagDeviceInterfaceId,omitempty" tf:"lag_device_interface_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// (Boolean)
	// +kubebuilder:validation:Optional
	Mgmtonly *bool `json:"mgmtonly,omitempty" tf:"mgmtonly,omitempty"`

	// all.
	// Valid values are `access`, `tagged` and `tagged-all`.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Mtu *float64 `json:"mtu,omitempty" tf:"mtu,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number) The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	// The netbox_device_interface id of the parent interface. Useful if this interface is a logical interface.
	// +kubebuilder:validation:Optional
	ParentDeviceInterfaceID *float64 `json:"parentDeviceInterfaceId,omitempty" tf:"parent_device_interface_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	Speed *float64 `json:"speed,omitempty" tf:"speed,omitempty"`

	// (Set of Number)
	// +kubebuilder:validation:Optional
	TaggedVlans []*float64 `json:"taggedVlans,omitempty" tf:"tagged_vlans,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	UntaggedVlan *float64 `json:"untaggedVlan,omitempty" tf:"untagged_vlan,omitempty"`
}

// DeviceInterfaceSpec defines the desired state of DeviceInterface
type DeviceInterfaceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceInterfaceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeviceInterfaceInitParameters `json:"initProvider,omitempty"`
}

// DeviceInterfaceStatus defines the observed state of DeviceInterface.
type DeviceInterfaceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceInterfaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceInterface is the Schema for the DeviceInterfaces API. From the official documentation https://docs.netbox.dev/en/stable/features/device/#interface: Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type DeviceInterface struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   DeviceInterfaceSpec   `json:"spec"`
	Status DeviceInterfaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceInterfaceList contains a list of DeviceInterfaces
type DeviceInterfaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeviceInterface `json:"items"`
}

// Repository type metadata.
var (
	DeviceInterface_Kind             = "DeviceInterface"
	DeviceInterface_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeviceInterface_Kind}.String()
	DeviceInterface_KindAPIVersion   = DeviceInterface_Kind + "." + CRDGroupVersion.String()
	DeviceInterface_GroupVersionKind = CRDGroupVersion.WithKind(DeviceInterface_Kind)
)

func init() {
	SchemeBuilder.Register(&DeviceInterface{}, &DeviceInterfaceList{})
}

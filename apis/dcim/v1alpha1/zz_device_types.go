// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DeviceInitParameters struct {

	// (String)
	AssetTag *string `json:"assetTag,omitempty" tf:"asset_tag,omitempty"`

	// (Number)
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String)
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// (Map of String)
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) This is best managed through the use of jsonencode and a map of settings.
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData *string `json:"localContextData,omitempty" tf:"local_context_data,omitempty"`

	// (Number)
	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// (Number)
	PlatformID *float64 `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	// (String) Valid values are front and rear. Required when rack_position is set.
	// Valid values are `front` and `rear`. Required when `rack_position` is set.
	RackFace *string `json:"rackFace,omitempty" tf:"rack_face,omitempty"`

	// (Number)
	RackID *float64 `json:"rackId,omitempty" tf:"rack_id,omitempty"`

	// (Number)
	RackPosition *float64 `json:"rackPosition,omitempty" tf:"rack_position,omitempty"`

	// (String)
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// (String) Valid values are offline, active, planned, staged, failed and inventory. Defaults to active.
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	VirtualChassisID *float64 `json:"virtualChassisId,omitempty" tf:"virtual_chassis_id,omitempty"`

	// (Boolean) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	VirtualChassisMaster *bool `json:"virtualChassisMaster,omitempty" tf:"virtual_chassis_master,omitempty"`

	// (Number)
	VirtualChassisPosition *float64 `json:"virtualChassisPosition,omitempty" tf:"virtual_chassis_position,omitempty"`

	// (Number)
	VirtualChassisPriority *float64 `json:"virtualChassisPriority,omitempty" tf:"virtual_chassis_priority,omitempty"`
}

type DeviceObservation struct {

	// (String)
	AssetTag *string `json:"assetTag,omitempty" tf:"asset_tag,omitempty"`

	// (Number)
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String)
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// (Map of String)
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number)
	DeviceTypeID *float64 `json:"deviceTypeId,omitempty" tf:"device_type_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) This is best managed through the use of jsonencode and a map of settings.
	// This is best managed through the use of `jsonencode` and a map of settings.
	LocalContextData *string `json:"localContextData,omitempty" tf:"local_context_data,omitempty"`

	// (Number)
	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// (Number)
	PlatformID *float64 `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	// (Number)
	PrimaryIPv4 *float64 `json:"primaryIpv4,omitempty" tf:"primary_ipv4,omitempty"`

	// (Number)
	PrimaryIPv6 *float64 `json:"primaryIpv6,omitempty" tf:"primary_ipv6,omitempty"`

	// (String) Valid values are front and rear. Required when rack_position is set.
	// Valid values are `front` and `rear`. Required when `rack_position` is set.
	RackFace *string `json:"rackFace,omitempty" tf:"rack_face,omitempty"`

	// (Number)
	RackID *float64 `json:"rackId,omitempty" tf:"rack_id,omitempty"`

	// (Number)
	RackPosition *float64 `json:"rackPosition,omitempty" tf:"rack_position,omitempty"`

	// (Number)
	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// (String)
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// (Number)
	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// (String) Valid values are offline, active, planned, staged, failed and inventory. Defaults to active.
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	VirtualChassisID *float64 `json:"virtualChassisId,omitempty" tf:"virtual_chassis_id,omitempty"`

	// (Boolean) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	VirtualChassisMaster *bool `json:"virtualChassisMaster,omitempty" tf:"virtual_chassis_master,omitempty"`

	// (Number)
	VirtualChassisPosition *float64 `json:"virtualChassisPosition,omitempty" tf:"virtual_chassis_position,omitempty"`

	// (Number)
	VirtualChassisPriority *float64 `json:"virtualChassisPriority,omitempty" tf:"virtual_chassis_priority,omitempty"`
}

type DeviceParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	AssetTag *string `json:"assetTag,omitempty" tf:"asset_tag,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	ClusterID *float64 `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// (Map of String)
	// +kubebuilder:validation:Optional
	CustomFields map[string]*string `json:"customFields,omitempty" tf:"custom_fields,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number)
	// +crossplane:generate:reference:type=DeviceType
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DeviceTypeID *float64 `json:"deviceTypeId,omitempty" tf:"device_type_id,omitempty"`

	// Reference to a DeviceType to populate deviceTypeId.
	// +kubebuilder:validation:Optional
	DeviceTypeIDRef *v1.Reference `json:"deviceTypeIdRef,omitempty" tf:"-"`

	// Selector for a DeviceType to populate deviceTypeId.
	// +kubebuilder:validation:Optional
	DeviceTypeIDSelector *v1.Selector `json:"deviceTypeIdSelector,omitempty" tf:"-"`

	// (String) This is best managed through the use of jsonencode and a map of settings.
	// This is best managed through the use of `jsonencode` and a map of settings.
	// +kubebuilder:validation:Optional
	LocalContextData *string `json:"localContextData,omitempty" tf:"local_context_data,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	LocationID *float64 `json:"locationId,omitempty" tf:"location_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	PlatformID *float64 `json:"platformId,omitempty" tf:"platform_id,omitempty"`

	// (String) Valid values are front and rear. Required when rack_position is set.
	// Valid values are `front` and `rear`. Required when `rack_position` is set.
	// +kubebuilder:validation:Optional
	RackFace *string `json:"rackFace,omitempty" tf:"rack_face,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	RackID *float64 `json:"rackId,omitempty" tf:"rack_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	RackPosition *float64 `json:"rackPosition,omitempty" tf:"rack_position,omitempty"`

	// (Number)
	// +crossplane:generate:reference:type=DeviceRole
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RoleID *float64 `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// Reference to a DeviceRole to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDRef *v1.Reference `json:"roleIdRef,omitempty" tf:"-"`

	// Selector for a DeviceRole to populate roleId.
	// +kubebuilder:validation:Optional
	RoleIDSelector *v1.Selector `json:"roleIdSelector,omitempty" tf:"-"`

	// (String)
	// +kubebuilder:validation:Optional
	Serial *string `json:"serial,omitempty" tf:"serial,omitempty"`

	// (Number)
	// +crossplane:generate:reference:type=Site
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SiteID *float64 `json:"siteId,omitempty" tf:"site_id,omitempty"`

	// Reference to a Site to populate siteId.
	// +kubebuilder:validation:Optional
	SiteIDRef *v1.Reference `json:"siteIdRef,omitempty" tf:"-"`

	// Selector for a Site to populate siteId.
	// +kubebuilder:validation:Optional
	SiteIDSelector *v1.Selector `json:"siteIdSelector,omitempty" tf:"-"`

	// (String) Valid values are offline, active, planned, staged, failed and inventory. Defaults to active.
	// Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	// +kubebuilder:validation:Optional
	VirtualChassisID *float64 `json:"virtualChassisId,omitempty" tf:"virtual_chassis_id,omitempty"`

	// (Boolean) Required when virtual_chassis_master and virtual_chassis_id is set.
	// Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
	// +kubebuilder:validation:Optional
	VirtualChassisMaster *bool `json:"virtualChassisMaster,omitempty" tf:"virtual_chassis_master,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	VirtualChassisPosition *float64 `json:"virtualChassisPosition,omitempty" tf:"virtual_chassis_position,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	VirtualChassisPriority *float64 `json:"virtualChassisPriority,omitempty" tf:"virtual_chassis_priority,omitempty"`
}

// DeviceSpec defines the desired state of Device
type DeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeviceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeviceInitParameters `json:"initProvider,omitempty"`
}

// DeviceStatus defines the observed state of Device.
type DeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Device is the Schema for the Devices API. From the official documentation https://docs.netbox.dev/en/stable/features/devices/#devices: Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type Device struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeviceSpec   `json:"spec"`
	Status            DeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeviceList contains a list of Devices
type DeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Device `json:"items"`
}

// Repository type metadata.
var (
	Device_Kind             = "Device"
	Device_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Device_Kind}.String()
	Device_KindAPIVersion   = Device_Kind + "." + CRDGroupVersion.String()
	Device_GroupVersionKind = CRDGroupVersion.WithKind(Device_Kind)
)

func init() {
	SchemeBuilder.Register(&Device{}, &DeviceList{})
}

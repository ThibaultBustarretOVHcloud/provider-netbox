// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAddressInitParameters struct {

	// (String)
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String)
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (Number) Required when object_type is set.
	// Required when `object_type` is set.
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// (Number)
	NATInsideAddressID *float64 `json:"natInsideAddressId,omitempty" tf:"nat_inside_address_id,omitempty"`

	// (String) Valid values are virtualization.vminterface and dcim.interface. Required when interface_id is set.
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (String) Valid values are loopback, secondary, anycast, vip, vrrp, hsrp, glbp and carp.
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Valid values are active, reserved, deprecated, dhcp and slaac.
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Conflicts with interface_id and device_interface_id.
	// Conflicts with `interface_id` and `device_interface_id`.
	VirtualMachineInterfaceID *float64 `json:"virtualMachineInterfaceId,omitempty" tf:"virtual_machine_interface_id,omitempty"`

	// (Number)
	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

type IPAddressObservation struct {

	// (String)
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Conflicts with interface_id and virtual_machine_interface_id.
	// Conflicts with `interface_id` and `virtual_machine_interface_id`.
	DeviceInterfaceID *float64 `json:"deviceInterfaceId,omitempty" tf:"device_interface_id,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (Number) Required when object_type is set.
	// Required when `object_type` is set.
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// (Number)
	NATInsideAddressID *float64 `json:"natInsideAddressId,omitempty" tf:"nat_inside_address_id,omitempty"`

	// (List of Object) (see below for nested schema)
	NATOutsideAddresses []NATOutsideAddressesObservation `json:"natOutsideAddresses,omitempty" tf:"nat_outside_addresses,omitempty"`

	// (String) Valid values are virtualization.vminterface and dcim.interface. Required when interface_id is set.
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (String) Valid values are loopback, secondary, anycast, vip, vrrp, hsrp, glbp and carp.
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Valid values are active, reserved, deprecated, dhcp and slaac.
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Conflicts with interface_id and device_interface_id.
	// Conflicts with `interface_id` and `device_interface_id`.
	VirtualMachineInterfaceID *float64 `json:"virtualMachineInterfaceId,omitempty" tf:"virtual_machine_interface_id,omitempty"`

	// (Number)
	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

type IPAddressParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// (String)
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Number) Conflicts with interface_id and virtual_machine_interface_id.
	// Conflicts with `interface_id` and `virtual_machine_interface_id`.
	// +crossplane:generate:reference:type=github.com/thibaultbustarret-ovhcloud/provider-netbox/apis/dcim/v1alpha1.DeviceInterface
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	DeviceInterfaceID *float64 `json:"deviceInterfaceId,omitempty" tf:"device_interface_id,omitempty"`

	// Reference to a DeviceInterface in dcim to populate deviceInterfaceId.
	// +kubebuilder:validation:Optional
	DeviceInterfaceIDRef *v1.Reference `json:"deviceInterfaceIdRef,omitempty" tf:"-"`

	// Selector for a DeviceInterface in dcim to populate deviceInterfaceId.
	// +kubebuilder:validation:Optional
	DeviceInterfaceIDSelector *v1.Selector `json:"deviceInterfaceIdSelector,omitempty" tf:"-"`

	// (String)
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// (Number) Required when object_type is set.
	// Required when `object_type` is set.
	// +kubebuilder:validation:Optional
	InterfaceID *float64 `json:"interfaceId,omitempty" tf:"interface_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	NATInsideAddressID *float64 `json:"natInsideAddressId,omitempty" tf:"nat_inside_address_id,omitempty"`

	// (String) Valid values are virtualization.vminterface and dcim.interface. Required when interface_id is set.
	// Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (String) Valid values are loopback, secondary, anycast, vip, vrrp, hsrp, glbp and carp.
	// Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// (String) Valid values are active, reserved, deprecated, dhcp and slaac.
	// Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (Set of String)
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	TenantID *float64 `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// (Number) Conflicts with interface_id and device_interface_id.
	// Conflicts with `interface_id` and `device_interface_id`.
	// +kubebuilder:validation:Optional
	VirtualMachineInterfaceID *float64 `json:"virtualMachineInterfaceId,omitempty" tf:"virtual_machine_interface_id,omitempty"`

	// (Number)
	// +kubebuilder:validation:Optional
	VrfID *float64 `json:"vrfId,omitempty" tf:"vrf_id,omitempty"`
}

type NATOutsideAddressesInitParameters struct {
}

type NATOutsideAddressesObservation struct {

	// (Number)
	AddressFamily *float64 `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	// (String) The ID of this resource.
	ID *float64 `json:"id,omitempty" tf:"id,omitempty"`

	// (String)
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type NATOutsideAddressesParameters struct {
}

// IPAddressSpec defines the desired state of IPAddress
type IPAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAddressParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPAddressInitParameters `json:"initProvider,omitempty"`
}

// IPAddressStatus defines the observed state of IPAddress.
type IPAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPAddress is the Schema for the IPAddresss API. From the official documentation https://docs.netbox.dev/en/stable/features/ipam/#ip-addresses: An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world. Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netbox}
type IPAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipAddress) || (has(self.initProvider) && has(self.initProvider.ipAddress))",message="spec.forProvider.ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || (has(self.initProvider) && has(self.initProvider.status))",message="spec.forProvider.status is a required parameter"
	Spec   IPAddressSpec   `json:"spec"`
	Status IPAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAddressList contains a list of IPAddresss
type IPAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAddress `json:"items"`
}

// Repository type metadata.
var (
	IPAddress_Kind             = "IPAddress"
	IPAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAddress_Kind}.String()
	IPAddress_KindAPIVersion   = IPAddress_Kind + "." + CRDGroupVersion.String()
	IPAddress_GroupVersionKind = CRDGroupVersion.WithKind(IPAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAddress{}, &IPAddressList{})
}
